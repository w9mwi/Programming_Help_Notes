GIT TUTORIAL:  http://rypress.com/tutorials/git/index

CREATE GIT REPOSITORY - FROM YOUR COMPUTER VIA THE COMMAND LINE:
                        1) Create a new directory that will hold your new software project.
                        2) From the comand line, run the following:
                           > git init
                           > dir .git   (You should now see a new .git folder that was created.)
                           > git status (You should now see text that reveals the git status.)
DELETE GIT REPOSITORY - FROM YOUR COMPUTER VIA THE COMMAND LINE:
                        Go to the top-level directory/folder of your project (aka, the git repository),
                        then delete the .git folder, which may be invisible.  Doing this deletes the
                        git repository.  You can then delete all other files/folders from this folder
                        to make it completely empty.
                        To delete a specific git branch (in this example, named 'test'), run the following command(s):
                        > git branch -d test  (-d is the delete flag.)
                        ...OR...
                        > git branch -D test  (-D is the delete flag.)
                        NOTE: You cannot delete the 'master' branch using this command.
                              To accomplish that, just delete the .git directory as stated above.
WORKING DIRECTORY - The top-level directory/folder that contains all files and subdirectories
                    that comprise your software project.
SNAPSHOT/STAGING  - A snapshot represents the state of your project at a given point in time.
                    Git’s term for creating a snapshot is called staging because we can add or remove
                    multiple files before actually committing it to the project history.  Staging gives
                    us the opportunity to group related changes into distinct snapshots—a practice that
                    makes it possible to track the meaningful progression of a software project (instead
                    of just arbitrary lines of code).  nly after executing git commit will our snapshot
                    be recorded in the repository. Committed snapshots can be seen as “safe” versions of
                    the project.  Git will never change them, which means you can do almost anything you
                    want to your project without losing those “safe” revisions.
GIT ADD             After a new file (or set of files) is created, and these files contains the correct
                    code, you can add them to your snapshot via the "add" command, like this:
                    > git add index_1.html index_2.html index_3.html
                    To add all files (staged that have changes, and unstaged files) in the current directory, run:
                    > git add *
GIT COMMIT C        To commit all files of your snapshot (files added with the git "add" command, you can
                    commit them to the repository via the git "commit" command:
                    > git commit -m "Added index.html file."
                    > git status
                  To commit all STAGED files without having to first do a "git add", you can run the following command:
                  > git commit -a -m "Add CSS stylesheet to rainbow.html" (The -a performs the "git add" command on all previously
                                                                           STAGED files.  Which means files that have been previously
                                                                           added with "git add", but have been changed since then.)
GIT LOG           Run the following:
                    > git log  (Displays only git commits.)
                    > git log --oneline  (Displays each commit on only one line.)
                    > git log --oneline blue.html  (Displays each commit that contains "blue.html" on only one line.)
                    > git log -n 4  (Displays log for the 4 most-recent commits.)
GIT CONFIG        Run the following commands so git knows your name and e-mail address.  You need to
                    do this ONLY ONCE.  Now when you commit files to your git repository, and you
                    later run "git log", your name and e-mail address will show up in the log output.
                    > git config  --global user.name   "Joe Schmoe"
                    > git config  --global user.email  joeschmoe@yahoo.com
GIT CHECKOUT      To checkout an existing branch, do:
                    > git checkout master  (master is name of branch.)
                  To create a new branch named poop, AND checkout this new poop branch simultaneously, run this command:
                    > git checkout -b poop
                  To checkout a previous snapshot, do the following:
                    > git log  (Text similar to the following will display.)
                      commit c9d66dd85f0b6891e5d3f29fc12750e6ca74ad9d
                      Author: TJB <w9mwi@yahoo.com>
                      Date:   Thu Jan 14 20:22:41 2016 -0600
                    > git checkout c9d66dd85f0b6891e5d3f29fc12750e6ca74ad9d  (Checkout the snapshot shown above.)
                    > git status
                    > git log
                    > git checkout master  (Returns to the master branch.)
TAG A RELEASE     To tag a release, do the following:
                    > git checkout master
                    > git tag -a Version_1.0  -m "Tag Version 1.0"
                    > You can now add/commit more files.  When you want to return to the "Version_1.0" tag, do this:
                    > git checkout Version_1.0
GIT REVERT        Undo the specified commit by applying a new commit.  Undoes changes contained in committed snapshots.
                    > git log
                    > git checkout master  (Choose a snapshot ID from the above "git log" command, and run the following:
                    > git revert b1b4e7a77fe1164952cad7699292024686c3357c
GIT RESET         Reset tracked files to match the most recent commit.  Undoes changes to the working directory and the
                  staged snapshot.  Assume you made text changes to an already-committed file named: index.html
                  To revert your changes made to index.html, do the following:
                    > git reset --hard
                    > git clean -f
                  The above 2 (TWO) commands together permanently undoes uncommitted changes.
GIT CLEAN         Assume you created a new file named dummy.html.  But you didn't add or commit it to git, which
                  means dummy.html is NOT tracked.  To remove this index.html file AND ALL TRACKED FILES, run:
                    > git clean -f  (Remove untracked files.)
BRANCHES         To create a new branch named poop, and then check it out, do the following:
                 > git branch poop
                 > git checkout poop
                 To create a new branch named poop, AND checkout this new poop branch simultaneously, run this command:
                 > git checkout -b poop

                 In Git, a branch is an independent line of development.  Branches present an error-proof method for
                 incorporating changes from an experiment.  Branches also let you store all of your experiments in a
                 single directory, which makes it much easier to keep track of them and to share them with others.
                 Creating a new branch is really just a way to request an independent working directory, staging
                 snapshot, and history.  There are four (4) core elements to work with throughout the rest of this tutorial:
                 1) The Working Directory
                 2) The Staged Snapshot
                 3) Committed Snapshots
                 4) Development Branches
                 When the "git branch" command creates a new branch, it uses the current HEAD NODE as the starting point for the
                 new branch.  This means the new branch begins as a copy of the existing branch--so it will contain a copy
                 of the existing branch's files located in the current working directory.
                 
                 Git uses the tip of a branch to represent the entire branch.  In other words, a branch is actually
                 a pointer to a single commit—-not a container for a series of commits.

                 The following command displays our one and only branch: * master.  The master branch is Git’s default
                 branch, and the asterisk next to it tells us that it’s currently checked out.  Notice that since
                 there’s only one working directory for each project, only one branch can be checked out at a time.
                 > git branch
                 * master  (This gets displayed when "git branch" is run.)
                 Next, check out a previous snapshot (514fbe7 referes to the ID of the crazy.html commit.)
                 > git checkout 514fbe7
                 From this, let's now create a new branch called "crazy":
                 > git branch crazy
                 And now, let's checkout this new "crazy" branch so we'll no longer be on the "master" branch.
                 > git checkout crazy
                 The new "crazy" branch is a completely isolated from the "master" branch, so we can
                 mess with files in this same working directory without changing any files on the "master" branch.

                 Rename crazy.html to rainbow.html, then use the following Git commands to update the repository.
                 > git status
                 > git rm crazy.html
                 > git status
                 > git add rainbow.html
                 > git status
                 > git commit -m "Rename crazy.html to rainbow.html"
                 The git rm command above tells Git to stop tracking crazy.html (and delete it if necessary), and the
                 git add command above starts tracking rainbow.html.  The renamed: crazy.html -> rainbow.html message
                 in the "git status" output shows us that Git is smart enough to figure out when we’re renaming a file.
                 Now, when we run "git branch", we see both branches (crazy and master) that exist:
                 > git branch
                     crazy
                   * master

DELETE BRANCH   To delete a branch named poop, run the following commands.  Git will warn you if you’re deleting an unmerged branch.
                > git branch -d poop  (-d is the delete flag.  Use -D flag if the poop branch hasn't been merged into another branch.)
                > git branch  (Confirm the poop branch is gone.)

GIT MERGE       > git checkout master  (Go to the master branch.)
                > git merge css  (Merge the css branch into the master branch.)

                Git can merge changes into any branch (not just the master branch).  We can pull the updates in with
                with the familiar git merge command.  Merging only affects the checked-out branch.  Now, merge the
                master branch into the crazy branch...
                > git checkout crazy
                > git merge master
                > git log --oneline
GIT REBASE     On the this web page (http://rypress.com/tutorials/git/rebasing), search for the text: Publish News Hotfix
               Under that text you'll see a diagram labeled with this text:  Fast-forwarding master to the news-hotfix
               We'll call this the BEFORE DIAGRAM.
               Below that diagram, you'll see another diagram labeled with this text:  Rebasing the about branch onto master
               We'll call this the AFTER DIAGRAM.
               Using the git rebase command, we want to change the 'about' branch represented in the BEFORE DIAGRAM,
               to the 'about' branch represented in the AFTER DIAGRAM.  To do this, run the following 2 commands:
               > git checkout about
               > git rebase master
               NOTE: Git rebase requires you to be on the branch that you want to alter.  In this example,
                     we must be on the 'about' branch.  Running the 'git rebase master' command will alter
                     the 'about' branch so its TAIL NODE will now connenct to the HEAD NODE of the 'master' branch.
                     Again, see the BEFORE DIAGRAM versus the AFTER DIAGRAM on the web page mentioned above.

              An INTERACTIVE REBASE prompts the user with an opened text file, which can be edited to alter how the
              rebase performs.  If the user does NOT alter this text file, the rebase that occurs will be identical
              to running the 'git rebase' command WITHOUT the -i flag shown below.  To run an interactive rebase on
              the 'about' branch, do the following:
              > git checkout about
              > git rebase -i master  (The -i flag menas INTERACTIVE, so the user will be prompted to change behavior.)
              
              If you're in the middle of performing a rebase, and you get lost (not certain if what you're doing
              is correct), you can abort rebase in midstream by running the following command:
              > git rebase ‑‑abort

              Rebasing enables fast-forward merges by moving a branch to the tip of another branch.  It effectively
              eliminates the need for merge commits, resulting in a completely linear history.  To an outside observer,
              it will seem as though you created every part of your project in a neatly planned sequence, even though
              you may have explored various alternatives or developed unrelated features in parallel.  Rebasing gives
              you the power to choose exactly what gets stored in your repositories.
GIT REFLOG    Git uses something called the reflog to record every change you make to your repository.  The reflog is
              a chronological listing of repository history, without regard for the repository’s branch structure.
              This lets us find dangling commits that would otherwise be lost from the project history.  Run the
              following command, which will display a list of history:
              > git reflog

REMOTE REPOSITORIES  A remote repository is one that's not your own.  It can be another Git repository located
                     on your company’s network, the internet, or even on your hard disk.  Remote branches
                     act just likelocal branches, except they represent a branch in someone else’s repository.

CLONING REPOSITORY  To clone an existing repository located on your hard disk, do the following...
                    On the command line, navigate to the PARENT DIRECTORY containing the repository
                    you want to clone.  In this example, the "C:\Tom\Programming" parent directory
                    contains the child directory "C:\Tom\Programming\my-git-repo".  So navigate to
                    the "C:\Tom\Programming" directory, then run the following commands:
                       > git clone my-git-repo  marys-repo  (marys-repo is now a clone of my-git-repo).
                       > cd marys-repo  (You are now in the marys-repo repository.)
                       > git branch  (Verify that only the master branch exists.)
                       > git config user.name "Mary"
                       > git config user.email w9mwi@yahoo.com
                    When you clone a repository, Git automatically adds an 'origin' remote that points to the
                    repository you just cloned.  Because you’ll probably want to interact with this 'origin'
                    repository (the repository you cloned) sometime later.  Run the following command
                    to confirm you have a remote repository named 'origin'.
                       > git remote -v  (The -v flag means verbose.  The following 2 lines are output.)
                       origin  C:/Tom/Programming/my-git-repo (fetch)
                       origin  C:/Tom/Programming/my-git-repo (push)
                    Next, navigate back to the "C:\Tom\Programming\my-git-repo" directory, and run the following commands:
                       > git remote -v (Notice that there exists no remote repository.)
                       > git remote add mary ../marys-repo   (Create a remote repository named 'mary', pointing to the
                                                              repository located in "C:\Tom\Programming\marys-repo")
                       > git remote -v  (The following 2 lines are output.)
                       mary    ../marys-repo (fetch)
                       mary    ../marys-repo (push)
                    In the "C:\Tom\Programming\my-git-repo" directory, we can now reference the 'mary' repository.
                    In the "C:\Tom\Programming\marys-repo" directory, we can now reference the 'origin' repository.

MERGING FROM ONE REPOSITORY INTO ANOTHER:
                    After you've completed all steps in the above CLONING REPOSITORY section, do the following
                    to merge code from the 'mary' repository (located in the 'marys-repo' directory) into the
                    'origin' repository (located in the 'my-git-repo' directory).
                    From the "C:\Tom\Programming\my-git-repo" directory, run these commands:
                       > git fetch mary  (Fetch all of the branches located in the marys-repo repository into
                                          the my-git-repo repository.)
                       > git branch -r   (Displays all branches that exist in REMOTE REPOSITORIES, as shown below.)
                       mary/bio-page
                       mary/master
                   Let's now checkout the mary/master branch into the my-git-repo directory.
                       > git checkout mary/master  (Checkout the master branch from the mary repository,
                                                    so we can review code changes made by Mary.)
                       > git checkout master       (Checkout our own master branch, which overwrites the mary/master
                                                    branch that we just checked out in the previous command.)
                       > git merge mary/master     (Merge the mary/master branch into our master branch.)
FETCH AND PUSH    The fetch and push commands are almost opposites.  Fetch IMPORTS A BRANCH from a remote repository.
                  Push CREATES A NEW LOCAL BRANCH in a remote repository.  Navigate to the "C:\Tom\Programming\my-git-repo" directory,
                  and run the following 2 commands, which will create a new 'dummy' branch in the my-git-repo directory,
                  and will then export this 'dummy' branch to the 'mary' repository.
                  > git branch dummy
                  > git push mary dummy
                  As a general rule, you should never push into another developer’s repository.  The reason "git push" exists
                  is that it allows you to make changes to a PUBLIC repository, that must be maintained by multiple people.
                  Next, navigate to the "C:\Tom\Programming\my-git-repo" directory, tag the master branch in this
                  directory, and then push this tagged v2.0 version to the 'mary' repository.
                  > git tag -a v2.0 -m "An even stabler version of the website"
                  > git push mary v2.0
                  Navigate to the "C:\Tom\Programming\marys-repo" directory, and run the following command.
                  > git tag  (The 'v2.0' tag should display.)
                  It’s very easy to forget to push new tags, so if it seems like your project has lost a tag or two,
                  it’s most likely because you didn’t to push them to the remote repository.
                  Note that "remotes" are for people.  "Branches" are for topics.  Do not create separate branches
                  for each of your developers—-give them separate repositories and bookmark them with git remote add.
                  Branches should always be for project development, not user management.


================================================================================================
HOW TO CREATE A NEW GIT REPOSITORY THAT'S ALREADY LOADED WITH PRE-EXISTING FILES AND DIRECTORIES

Assume you have a parent directory that contains an entire working Android project.
This parent directory contains numerous files and directories, that contain yet more
files and directories.  How do you get all these files and directories into git
repository?  Follow these instructions...

1) This step is an aside.  You probably don't want/need to do this, but...  Assume you have an existing repository
   on GitHub (named Android_Sample_Code) that is old, and full of junk you now longer want.  To delete this
   existing GitHub repository (named Android_Sample_Code), go into that repository on GitHub.com, select the
   'Settings' tab near the upper-right corner.  Then, under the 'Danger Zone' at the bottom of the page,
   press the 'Delete this repository' button.  In the dialog popup that appears, enter the exact spelling
   of the repository name you want to delete (Android_Sample_Code) in the entry field.  Finally, press the
   "I understand the consequences, delete this repository" button.  The Android_Sample_Code repository
   located in GitHub is now deleted!
   
2) To create a new repository on GitHub named 'Android_Sample_Code'. go to https://github.com and log into
   your account.  Near the upper-right corner, press the button named '+ New repository'.  Enter Android_Sample_Code
   in the 'Repository name' field, and enter a description in the 'Description' field.  Finally, press the
   'Create repository' button at the bottom of the screen.

3) If you need to create files named README, LICENSE, or .gitignore in this new Android_Sample_Code repository,
   click on the  'README', 'LICENSE', or '.gitignore' link at the top of the page.  If you need to later delete
   from GitHub any of these files (or some other file) you created, click on the file name so you can view its
   contents.  Next, click on the trash can near the upper-rght corner.  On the web page that appears, enter
   a comment, and press the 'Commit changes' button.  The file is now deleted.  FYI, to add a new file in this
   GitHub repository, open the Android_Sample_Code repository, then 'New file' button near the top-center.

4) 
   
   
   Create a new git repository on GitHub.com
