GIT TUTORIAL:  http://rypress.com/tutorials/git/index

CREATE GIT REPOSITORY - FROM YOUR COMPUTER VIA THE COMMAND LINE:
                        1) Create a new directory that will hold your new software project.
                        2) From the comand line, run the following:
                           > git init
                           > dir .git   (You should now see a new .git folder that was created.)
                           > git status (You should now see text that reveals the git status.)
DELETE GIT REPOSITORY - FROM YOUR COMPUTER VIA THE COMMAND LINE:
                        Go to the top-level directory/folder of your project (aka, the git repository),
                        then delete the .git folder, which may be invisible.  Doing this deletes the
                        git repository.  You can then delete all other files/folders from this folder
                        to make it completely empty.
                        To delete a specific git branch (in this example, named 'test'), run the following command(s):
                        > git branch -d test  (-d is the delete flag.)
                        ...OR...
                        > git branch -D test  (-D is the delete flag.)
                        NOTE: You cannot delete the 'master' branch using this command.
                              To accomplish that, just delete the .git directory as stated above.
WORKING DIRECTORY - The top-level directory/folder that contains all files and subdirectories
                    that comprise your software project.
SNAPSHOT/STAGING  - A snapshot represents the state of your project at a given point in time.
                    Git’s term for creating a snapshot is called staging because we can add or remove
                    multiple files before actually committing it to the project history.  Staging gives
                    us the opportunity to group related changes into distinct snapshots—a practice that
                    makes it possible to track the meaningful progression of a software project (instead
                    of just arbitrary lines of code).  nly after executing git commit will our snapshot
                    be recorded in the repository. Committed snapshots can be seen as “safe” versions of
                    the project.  Git will never change them, which means you can do almost anything you
                    want to your project without losing those “safe” revisions.
ADD COMMAND       After a new file (or set of files) is created, and these files contains the correct
                    code, you can add them to your snapshot via the "add" command, like this:
                    > git add index_1.html index_2.html index_3.html
COMMIT COMMAND    To commit all files of your snapshot (files added with the git "add" command, you can
                    commit them to the repository via the git "commit" command:
                    > git commit -m "Added index.html file."
                    > git status
                  To commit all STAGED files without having to first do a "git add", you can run the following command:
                  > git commit -a -m "Add CSS stylesheet to rainbow.html" (The -a performs the "git add" command on all previously
                                                                           STAGED files.  Which means files that have been previously
                                                                           added with "git add", but have been changed since then.)
GIT LOG           Run the following:
                    > git log  (Displays only git commits.)
                    > git log --oneline  (Displays each commit on only one line.)
                    > git log --oneline blue.html  (Displays each commit that contains "blue.html" on only one line.)
GIT CONFIG        Run the following commands so git knows your name and e-mail address.  You need to
                    do this ONLY ONCE.  Now when you commit files to your git repository, and you
                    later run "git log", your name and e-mail address will show up in the log output.
                    > git config  --global user.name   "Joe Schmoe"
                    > git config  --global user.email  joeschmoe@yahoo.com
GIT CHECKOUT      To checkout an existing branch, do:
                    > git checkout master  (master is name of branch.)
                  To checkout a previous snapshot, do the following:
                    > git log  (Text similar to the following will display.)
                      commit c9d66dd85f0b6891e5d3f29fc12750e6ca74ad9d
                      Author: TJB <w9mwi@yahoo.com>
                      Date:   Thu Jan 14 20:22:41 2016 -0600
                    > git checkout c9d66dd85f0b6891e5d3f29fc12750e6ca74ad9d  (Checkout the snapshot shown above.)
                    > git status
                    > git log
                    > git checkout master  (Returns to the master branch.)
TAG A RELEASE     To tag a release, do the following:
                    > git checkout master
                    > git tag -a Version_1.0  -m "Tag Version 1.0"
                    > You can now add/commit more files.  When you want to return to the "Version_1.0" tag, do this:
                    > git checkout Version_1.0
GIT REVERT        Undo the specified commit by applying a new commit.  Undoes changes contained in committed snapshots.
                    > git log
                    > git checkout master  (Choose a snapshot ID from the above "git log" command, and run the following:
                    > git revert b1b4e7a77fe1164952cad7699292024686c3357c
GIT RESET         Reset tracked files to match the most recent commit.  Undoes changes to the working directory and the
                  staged snapshot.  Assume you made text changes to an already-committed file named: index.html
                  To revert your changes made to index.html, do the following:
                    > git reset --hard
                    > git clean -f
                    The above 2 (TWO) commands together permanently undoes uncommitted changes.
GIT CLEAN         Assume you created a new file named dummy.html.  But you didn't add or commit it to git, which
                  means dummy.html is NOT tracked.  To remove this index.html file AND ALL TRACKED FILES, run:
                    > git clean -f  (Remove untracked files.)

BRANCHES         To create a new branch, do the following:
                 > git branch NewBranch
                 > git checkout NewBranch

                 In Git, a branch is an independent line of development.  Branches present an error-proof method for
                 incorporating changes from an experiment.  Branches also let you store all of your experiments in a
                 single directory, which makes it much easier to keep track of them and to share them with others.
                 Creating a new branch is really just a way to request an independent working directory, staging
                 snapshot, and history.  There are four (4) core elements to work with throughout the rest of this tutorial:
                 1) The Working Directory
                 2) The Staged Snapshot
                 3) Committed Snapshots
                 4) Development Branches
                 When the "git branch" command creates a new branch, it uses the current HEAD as the starting point for the
                 new branch.  This means that we begin with the same files currently used by the branch that we're curently
                 on, located in the current working directory.

                 The following command displays our one and only branch: * master.  The master branch is Git’s default
                 branch, and the asterisk next to it tells us that it’s currently checked out.  Notice that since
                 there’s only one working directory for each project, only one branch can be checked out at a time.
                 > git branch
                 * master  (This gets displayed when "bit branch" is run.)
                 Next, check out a previous snapshot (514fbe7 referes to the ID of the crazy.html commit.)
                 > git checkout 514fbe7
                 From this, let's now create a new branch called "crazy":
                 > git branch crazy
                 And now, let's checkout this new "crazy" branch so we'll no longer be on "master" branch.
                 > git checkout crazy
                 The new "crazy" branch is a completely isolated from the "master" branch, so we can
                 mess with files in this same working directory without changing any files on the "master" branch.

                 Rename crazy.html to rainbow.html, then use the following Git commands to update the repository.
                 > git status
                 > git rm crazy.html
                 > git status
                 > git add rainbow.html
                 > git status
                 > git commit -m "Rename crazy.html to rainbow.html"
                 The git rm command above tells Git to stop tracking crazy.html (and delete it if necessary), and the
                 git add command above starts tracking rainbow.html.  The renamed: crazy.html -> rainbow.html message
                 in the "git status" output shows us that Git is smart enough to figure out when we’re renaming a file.
                 Now, when we run "git branch", we see both branches (crazy and master) that exist:
                 > git branch
                     crazy
                   * master

GIT MERGE       > git checkout master  (Go to the master branch.)
                > git merge css  (Merge the css branch into the master branch.)
                
DELETE BRANCH   Delete the css branch created above.  Git will warn you if you’re deleting an unmerged branch.
                > git branch -d css  (-d is the delete flag.)
                > git branch
                
GIT MERGE       Git can merge changes into any branch (not just the master branch).  We can pull the updates in with
                with the familiar git merge command.  Merging only affects the checked-out branch.  Now, merge the
                master branch into the crazy branch...
                > git checkout crazy
                > git merge master
                > git log --oneline


================================================================================================
HOW TO CREATE A NEW GIT REPOSITORY THAT'S ALREADY LOADED WITH PRE-EXISTING FILES AND DIRECTORIES

Assume you have a parent directory that contains an entire working Android project.
This parent directory contains numerous files and directories, that contain yet more
files and directories.  How do you get all these files and directories into git
repository?  Follow these instructions...

