RUBY - WEEK 1 - Software Installation
=====================================

Git link given in this section:  https://github.com/rubygems/rubygems/releases
(Don't know why this link was given, as it wasn't used.)

Install Ruby 2.1 + Rails + Git from:  http://railsinstaller.org/en

My user name is "Tom Bouril"

ssh:
public_key_location:  C:\Users\tbouril\.ssh\id_rsa.pub  (Which contains the following text.)
public_key_contents: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCo3euCrf6eIUpmOmmRo0yw6ObXm/1eSrrZoosIvviTbsO4DpDs7GKS0wZy0mIMmchNN+7jzVtitFNsYZyyrwIl5QDGDENNL9lvHrErlFxQcWcvRHsf1UiHT4S/CdA4Oo/wHQPgkrC1SnJqxsqNkR9r/Vpy4KpzvggNNumkMgFaQZsjJ8Ol07jv5TyYxnkbJwlx40ufU+WkVFnwE9mVJUrf5mmGBtqxEQvslHvY8qdpkcGlbPjnUP9nkbBNKG8nJ8Pau8mstJSg3mDC2owCD55Aad3+VHCR1eFFZon7x5OJHuWmTQSMFZ8ioONcWilNQPrs1MrlahJZgQGpmzfBii4r Tom Bouril <w9mwi@yahoo.com>

Next, install rails v 4.2.3 by going to this web page and downloading it:
https://rubygems.org/gems/rails
Installed in: C:\Tom\RailsInstaller  (Installed Git, and Ruby, and an older version of Rails.)
C:\> rails -v
C:\> gem install rails -v 4.2.3  (Installs Rails Version 4.2.3)

Show list of all installed Ruby Gems:  C:\> gems list

Ensuring Rails Installation Works:
1) C:\> rails new test_install  (Creates a new C:\test_install directory containing rails files.)
2) C:\test_install> rails server  (Launches the rails server)
3) In a web browser, enter:  http://localhost:3000   (A Ruby on Rails web page should display.)

Check version of Git installed:
C:\> git --version

Check version of Ruby installed:
C:\> ruby -v

Check version of Rail installed:
C:\> rails -v


Install Phantom: http://phantomjs.org
Installed in: C:\Tom\phantomjs-2.0.0-windows\bin\phantomjs.exe
C:\> phantomjs -v

Install Sublime Text Editor from:  http://www.sublimetext.com
Installed in: C:\Program Files\Sublime Text 2

=====================================
RUBY - WEEK 1 - Getting to Know Ruby
=====================================

From this web link:
https://www.coursera.org/learn/ruby-on-rails-intro/supplement/1BUdd/recommended-readings

There are these 3 Ruby Books:
http://www.amazon.com/dp/0321584104/?tag=jhu-ruby-coursera-20
http://www.amazon.com/dp/1937785491/?tag=jhu-ruby-coursera-20
http://www.amazon.com/dp/1430223634/?tag=jhu-ruby-coursera-20

Link to access the GitHub repository for all Module 2
coding examples and programming assignments:
https://github.com/jhu-ep-coursera/fullstack-course1-module2
https://github.com/jhu-ep-coursera/fullstack-course1-module2


There are no {} used with these statements: if / unless / elsif / else
These statements end with this keyword: end

These operators work just like Java: =,  ==


unless a == 6   # This statement is true when a is NOT 6
  puts "a ain't 6"
end


a = 10
while a > 9  # This statement executes while a > 9
  puts a
  a -= 1
end

a = 9
until a >= 10 # This statement executes until a >= 10
  puts a
  a += 1
end


a = 5
b = 0
puts "One liner" if a == 5 and b == 0
# The above prints this text:  One liner

times_2 = 2
times_2 *= 2 while times_2 < 100
puts times_2
# The above code prints: 128


The only things that wil be false are:
Any statement that evaluates to false, and nil objects

Whe the triple equals sign (===) is used, it evaluates
to true if there is a "match".  All of the following
examples execute the puts statement:

if /sera/ === "coursera"
  puts "Triple Equals"
end

if "coursera" === "coursera"  # Same as a == (double equals)
  puts "also works"
end

if Integer === 21
  puts "21 is an Integer"
end

The triple equals operator (===) is also called the
CASE EQUALITY OPERATOR, cuz it's used in Ruby case
statements.

In Ruby, there is no fall-through.  Only the case statement
that matches gets executed.

age = 21
case  # This case has nothing to do with the age variable--it's like an if/else
  when age >= 21
    puts "You can get drunk"  # Only this line gets executed.
  when 1 == 0
    puts "This will never print."
  else
    "Default condition"
end

name = 'Fisher'
case name # The target is name.  Every line below compares with thre name target variable.
  when /fish/i then puts "Something is fishy here."  # Only this line prints.
  when 'Smith' then puts "your name is Smith."
end


The for loop is rarely used in Ruby...
for i in 0..2
  puts i
end
Prints: 0
        1
        2


FUNCTIONS AND METHODS

Technically, a function is defined outside a class, and a method is
defined inside a class.  In Ruby, every function/method belongs to
at least one class.  But a function/method is not always written
inside a class.  From now on, functions will be considered methods.

A method can have parenthesis around it when they're called,
and when they're defined.  But these parenthesis are NOT required.
They're used for clarity.

def simple1
  puts "no parenthesis used."
end

def simple2()
  puts "parenthesis used."
end

There is no need to declare the type of parameters
used by methods...

def add(one, two)
  one + two
end

def divide(one, two)
  return "ERROR: Cannot divide by zero." if two == 0
  one / two
end

In Ruby, if there is no return statement, the last executed
line in the method is what gets returned.

Expressive Method Names... Method names can end with:
? - Predicate methods
! - Dangerous side effects


# An Integer (represented by the number param) has a method
called zero, which is called below as method.zero
def can_divide_by?(number)
  return false if number.zero?
  true  # true is returned cuz it's the value of the last line executed.
end

puts can_divide_by? 3  # true is returned
puts can_divide_by? 0  # false is returned


def factorial(n)
  n == 0? 1 : n * factorial(n - 1)
end

# If the following method is called without passing it
# a parameter, the default parameter is 5.
def factorial_with_default(n = 5)
  n == 0? 1 : n * factorial_with_default(n - 1)
end

# The Ruby ternary operator is like Java's...
condition ? true : false


Using the Ruby SPLAT (*)...
def max(one_param, *numbers, another)
  numbers.max
end

We can call the above method like this:
max("something", 7, 32, -4, "more")
"something" is passed to one_param
7, 32, -7 are passed to the numbers array.
"more" is passed to another
An array has a method called max(), which is called
in the above method.

There is no need to declare the parameter type
passed to a method, or returned from a method.
A method return statement is optional.
You can construct methods with a variable number
of arguments.

BLOCKS

A block is a "chunk of code."  Blocks are enclosed between
EITHER curly braces ({}) OR between "do" and "end".
Blocks are passed to methods as the last parameter.
The conventon is:
Use curly braces ({}) when the block is a single line.
Use do/end when the block spans multiple lines.
Blocks are often used as iterators.

EXAMPLE:
1.times {puts "Hello world"}  # Prints: Hello world

A block can also accept methods.  In the following
code, the parameter index is designated between 
the two pipes...

2.times do |index|
          if index > 0
            puts index
          end
end

This prints: 1

So the above code executes the "times" method
(which is defined in Ruby, I think?) two times.
I think index is also defined in Ruby, which
would be 1 the first the above code is executed,
and would be 2 the second time the above code
is executed.

2.times { |index| puts index if index > 0 }

This code is identical to the above code,
but uses {} instead of do/end.  This code
also prints: 1

There are two ways to configure a block in your own method...

1) IMPLICIT - Use block_given? (a built-in method) to see if
              a block was passed into the method.
              Use yield to "call" the block.  (Yields control to the block.)

    def two_times_implicit
      return "No block" unless block_given?
      yield
      yield
    end

    Let's call the above method these two ways:
    1)  puts two_times_implicit {puts "Hello" } 
        This prints:  Hello
                      Hello
    2) puts two_times_implicit
       This prints: No block


2) EXPLICIT - Use & in front of the last parameter of the method to declare a block.
              Use the call method to call the block.

   The following explicit method behaves identical to the above implicit method.
   
   def two_times_explicit(&i_am_a_block)
      return "No block" if i_am_a_block.nil?
      i_am_a_block.call
      i_am_a_block.call
   end

    Let's call the above method these two ways:
    1)  puts two_times_explicit
        This prints:  No block

    2) puts two_times_implicit { puts "Hello" }
       This prints: Hello
                    Hello

Blocks are just code that you can pass into methods.
When incorporating blocks into your own methods you
can call blocks either implicityly or explicitly.


FILES

Contents if test.txt is:

The first line of the file
And the second
Third

How to read from a file named test.txt.
NOTE File is a class, foreach is a method,
and the BLOCK is designated by do/end.
What is p in the below code???

File.foreach('test.txt') do |line|
  puts line
  p line
  p line.chomp  # Chops off newline character
  p line.split  # array of words in line
end

THE OUTPUT IS:
The first line of the file
"The first line of the file\n"
"The first line of the file"
["The", "first", "line", "of". "the", "file"]
And the second
"And the second\n"
"And the second"
["And", "the", "second"]
Third
"Third\n"
"Third"
[Third]

Next, we read from a file named do_not_exist.txt,
but this file does not exist.  Note again the
do/end block.

File.foreach('do_not_exist.txt') do |line|
  puts line.chomp
end

Ruby will throw an exception cuz there's no file.
Here's how to handle that exception:

begin
  File.foreach('do_not_exist.txt') do |line|
    puts line.chomp
  end

  rescue Exception => e  # rescue catches the exception
  puts e.message
  puts "Let's pretend this didn't happen..."
end

An alternative to catching the exception is to check
to see if the file exists, like this...

if File.exist? 'test.txt'
  File.foreach('do_not_exist.txt') do |line|
    puts line.chomp
  end
end


# Here's how to read lines from a file named test.txt:
if File.exist?('test.txt')
  File.foreach('test.txt') do |line|
    puts line.chomp
  end
end


# How to write to a file named test1.txt
File.open("test1.txt", "w") do |file|
  file.puts "One line"
  file.puts "Another"
end

The file automatically closes at the end of the
BLOCK--you don't need to close it like in Java.
The test1.txt file now contains this text:
One line
Another

* Files automatically get closed at the end of the BLOCK.
* To handle files that don't exist, you can use either
  exception handling, or check to see if the file exists.


ENVIRONMENT VARIABLES

puts ENV["EDITOR"]  # This is what prints:  subl


Get this assignment:
Instructions:
https://github.com/jhu-ep-coursera/fullstack-course1-module2/blob/master/Assignments/Lesson01-Assignment01-Case-Statement/README.pdf
Bootstrap files:
https://github.com/jhu-ep-coursera/fullstack-course1-module2/tree/master/Assignments/Lesson01-Assignment01-Case-Statement


STOPPED AT BEGINNING OF THIS LECTURE:
https://www.coursera.org/learn/ruby-on-rails-intro/supplement/xIC1E/practice-programming-assignment-case-statement
https://www.coursera.org/learn/ruby-on-rails-intro/supplement/xIC1E/practice-programming-assignment-case-statement


GIT

VCS = Version Control System - A system that keeps track of file changes.
VCS is also known as SCM (Scource Control Managemnt)

Centralized Version Control System are things like CVS, Subversion
      The repository resides on some central server
      The client has only one version of trunk or branch

Git is a Distributed Version Control System.
In Git (and Mercurial), the full repository resides locally.
The full history of all commits ever made also resides locally on your system.

The server is almost not involved.  You can commit often and offline,
so you can work anywhere.

With Git, you can push and pull between repositories.
Backups - are trivial and readily available.

The full repository of a distributed VCS resides LOCALLY,
while the repository of a centralized VCS resides ON A SERVER.

There exists only one .git directory at the top level directory,
not sprinkled at every directory level like the .svn file for Subversion.

GENERAL WORKFLOW OF GIT

1) You need a repository, so you create one, or clone an existing repository.
2) Add changes to the staging area.
3) Commit changes (from staging area to local repository).
4) Push changes from local to remote repository.

When you COMMIT, you always COMMIT LOCALLY.
When you PUSH, you always PUSH LOCALLY.

Summary:
Git lets you snapshot changes to your code.
Git promotes committing changes often.


GIT WEB SITE: http://git-scm.com/

LEARN GIT VIA THIS WEB LINK:
https://try.github.io/levels/1/challenges/1
https://try.github.io/levels/1/challenges/1
https://try.github.io/levels/1/challenges/1

FREE GIT BOOK:
http://git-scm.com/book/en/v2
http://git-scm.com/book/en/v2
http://git-scm.com/book/en/v2

Git Reference:
http://gitref.org/
http://gitref.org/
http://gitref.org/

GIT SETUP

You need to run the following 2 commands so when you commit to a git repository,
you will have an identity to leave in the history.  The "--global" means you
want these settings to apply to all of your git repositories.
git config --global user.name "TJB"
git config --global user.email w9mwi@yahoo.com

To confirm these values have been set, run:
git config user.name
git config user.email

To get git help, run:
git help


To create a new git repository in C:\Tom\Programming\ruby\git
go to that directory and run:
git init
(You can create a .gitignore file that contains directories that you don't want to be part of git.)
git add .  (Adds all files to the staging area.)
git commit -m "Initial commit"  (Adds the entire current directory with subdirectories.)


To clone an existing git repository do:
git clone http://repoul.git (or whatever URL).

To check the curent status of your repository, run:
git status

The following command adds untracked files/dirs to be tracked to the staging area,
OR adds a modified tracked file to the staging area.
git add <files/dirs>

WARNING: Modifications made to a file after "git add" must be added again!
NOTE: HEAD is the latest commit to the repository on the current branch.

There is a working directory, a repository, and a staging area.
(Staging area is like an inbetween directory.)

git diff  (Shows the difference between the staging and working directory.)
git diff --staged  (Shows the changes between HEAD (latest commit on current branch) and the staging directory.
git diff HEAD  (Shows the differences between HEAD and working directory.)
git commit  (Commits your changes to the repository.)
git commit -m "Your commit message."  (Use the -m to give your history message inline.)

To skip adding your file to the staging area first,
you can commit it directly by running:
git commit -am  "Your commit message."  (This only works after you initially add the file.)

To go back to all original files in the repository, run:
git checkout .  (OVERWRITES ALL LOCAL CHANGES NOT YET COMMITTED TO REPOSITORY.)
git checkout -- <file>  (This overwrites just one file you changed with what's in the repository.)
git revert HEAD  (reverts the most recent commit.)

SUMMARY:
1) You must ad a file at least once before it can go into the repository.
2) You can easily go "back in time" to a snapshot.


REMOTE REPOSITORIES AND GITHUB

To link your local repository with a remote repository, do the
folowing.  Where "alias" is any name you want to give it.
git remote add alias remote_url

"origin" is the default "alias" name of your cloned repository from a remote source.

To push your code out to a remote repository, run:
git push alias branch_name  (alias could be "master" for example.)

Why use Github?  It's community oriented.  Like facebook for developers.
Has a Wiki where you can document your project.

GITHUB
======
https://github.com/
Username: ???
Email: w9mwi@yahoo.com
Password: 8...

GO HERE:
https://github.com/jhu-ep-coursera/fullstack-course1-module2
https://github.com/jhu-ep-coursera/fullstack-course1-module2

When you get to github, type t (lowercase t) to perform a search of the github repository/module you're in.




STOPPED HERE AT 0:00:
https://www.coursera.org/learn/ruby-on-rails-intro/lecture/i0AZs/local-git-repository
https://www.coursera.org/learn/ruby-on-rails-intro/lecture/i0AZs/local-git-repository
https://www.coursera.org/learn/ruby-on-rails-intro/lecture/i0AZs/local-git-repository
